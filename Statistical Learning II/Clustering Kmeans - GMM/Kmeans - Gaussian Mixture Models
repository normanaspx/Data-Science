{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Practica I.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ezwiaKnVruaa"
      },
      "source": [
        "# Clustering: Kmeans - Gaussian Mixture Models\n",
        "### Norman Vicente"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "15Q05ECVAwiI"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.preprocessing import normalize\n",
        "from sklearn.preprocessing import scale\n",
        "from sklearn.mixture import GaussianMixture\n",
        "\n",
        "from datetime import datetime\n",
        "import pandas as pd"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "TsHwsPB5Lxax",
        "outputId": "f8f98e4b-1f63-4d86-9a53-2241848d1507"
      },
      "source": [
        "data = pd.read_csv('data.csv')\n",
        "data.head()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Estatura(metros)</th>\n",
              "      <th>Edad(años)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.77</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.74</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.72</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.78</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.65</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Estatura(metros)  Edad(años)\n",
              "0              1.77          26\n",
              "1              1.74          31\n",
              "2              1.72          24\n",
              "3              1.78          34\n",
              "4              1.65          32"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yg4hdmy3r7lo"
      },
      "source": [
        "## Kmeans"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h1ThtijgJgYG"
      },
      "source": [
        "K = 7\n",
        "\n",
        "class point():\n",
        "    def __init__(self, data):\n",
        "        self.data = data\n",
        "        self.k = np.random.randint(0,K)\n",
        "    \n",
        "    def __repr__(self):\n",
        "        return str({\"data\":self.data, \"k\":self.k})\n"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y-BIEcDeTLN4",
        "outputId": "4bacee4e-5255-445b-c453-fb68a663aefe"
      },
      "source": [
        "data.get(\"Edad(años)\").head()"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    26\n",
              "1    31\n",
              "2    24\n",
              "3    34\n",
              "4    32\n",
              "Name: Edad(años), dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QiTzY7dcTClE",
        "outputId": "4041f49f-dd58-4966-cc9f-5cdb33a30b2f"
      },
      "source": [
        "data.get(\"Estatura(metros)\").head()"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1.77\n",
              "1    1.74\n",
              "2    1.72\n",
              "3    1.78\n",
              "4    1.65\n",
              "Name: Estatura(metros), dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HhUDr9YcMuMI"
      },
      "source": [
        "N = data.size"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-xj5iPMlN0wh"
      },
      "source": [
        "points = [point(d) for d in data.values]"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y5kwGZ2MN4lW"
      },
      "source": [
        "from collections import defaultdict\n",
        "def make_k_mapping(points):\n",
        "    point_dict = defaultdict(list)\n",
        "    for p in points:\n",
        "        point_dict[p.k] = point_dict[p.k] + [p.data]\n",
        "    return point_dict"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hWPGtBtMN7Ub"
      },
      "source": [
        "def calc_k_means(point_dict):\n",
        "    means = [np.mean(point_dict[k], axis=0) for k in range(K)]\n",
        "    return means"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yCyB-MitOApf"
      },
      "source": [
        "def update_k(points,means):\n",
        "    for p in points:   \n",
        "        dists = [np.linalg.norm(means[k]-p.data) for k in range(K)]\n",
        "        p.k = np.argmin(dists)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iaO1EwFAWTVM"
      },
      "source": [
        "def fit(points, epochs=10):\n",
        "    for e in range(epochs):\n",
        "        point_dict = make_k_mapping(points)\n",
        "        means = calc_k_means(point_dict)\n",
        "        update_k(points, means)\n",
        "    return means, points\n",
        "new_means, new_points = fit(points)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vuhG26vwXGqK"
      },
      "source": [
        "means, points = fit(points)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "28HaFifhOFjQ"
      },
      "source": [
        "def evaluate(points):\n",
        "    point_dict = make_k_mapping(points)\n",
        "    means = calc_k_means(point_dict)\n",
        "\n",
        "    dists = [np.linalg.norm(means[p.k]-p.data) for p in points]\n",
        "    return np.mean(dists)"
      ],
      "execution_count": 187,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xtrHIpQlOJ6p",
        "outputId": "f9de2d42-037b-44f8-cbaf-c8741ce203c7"
      },
      "source": [
        "print(evaluate(points))"
      ],
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1.0459102497846526\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "iKSFDx3dY9p6",
        "outputId": "d0f0ec71-3bc8-4d24-ce9f-0f9a7e250c98"
      },
      "source": [
        "y=data.get(\"Estatura(metros)\").values\n",
        "x=data.get(\"Edad(años)\").values\n",
        "\n",
        "\n",
        "plt.scatter(x, y)\n",
        "plt.show()"
      ],
      "execution_count": 200,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kcK_avO0aB6a"
      },
      "source": [
        "g  = np.array(means[0])\n",
        "X = g[:,1]\n",
        "Y = g[:,0]"
      ],
      "execution_count": 201,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l1qWP0GpiM9b"
      },
      "source": [
        "## Experimentos\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RTpVmDVwjvNl"
      },
      "source": [
        "## Resultado para k = 7"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "vg34Lk4tjyOx",
        "outputId": "e5c41824-71f6-4955-b9e0-367c58dfd4c7"
      },
      "source": [
        "plt.scatter(x, y)\n",
        "x = X\n",
        "y =Y\n",
        "plt.scatter(X, Y)\n",
        "plt.show()"
      ],
      "execution_count": 202,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "56L8vggSiPSH"
      },
      "source": [
        "### Resultado para k = 3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "PmnGq0YEiVCe",
        "outputId": "d88a05db-fec0-4478-aec3-c123e70dfff9"
      },
      "source": [
        "plt.scatter(x, y)\n",
        "x = X\n",
        "y =Y\n",
        "plt.scatter(X, Y)\n",
        "plt.show()"
      ],
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ucT9rcMmfEUy"
      },
      "source": [
        "### Resultado para K = 5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "VPNzgjnlcp9a",
        "outputId": "a9dcc35a-9695-4ebc-86ef-f8719c700aa8"
      },
      "source": [
        "plt.scatter(x, y)\n",
        "x = X\n",
        "y =Y\n",
        "plt.scatter(X, Y)\n",
        "plt.show()"
      ],
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "36YfS4_GhTdp"
      },
      "source": [
        "## Clustering y experimentos con GMM"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WGa67SnucwRR",
        "outputId": "a8f58447-0190-48b8-933d-fc8dca4da6cd"
      },
      "source": [
        "gm = GaussianMixture(n_components=5, random_state=0).fit(data.values)\n",
        "gm.means_"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.74192076, 26.41818021],\n",
              "       [ 1.84      , 51.        ],\n",
              "       [ 1.72758414, 32.87157212],\n",
              "       [ 1.69590688, 23.8566132 ],\n",
              "       [ 1.73411689, 40.29244972]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R60BXytdsVJn",
        "outputId": "065c9ac2-46d3-4b7c-d085-2c5d6b9d30c0"
      },
      "source": [
        "gm = GaussianMixture(n_components=7, random_state=0).fit(data.values)\n",
        "gm.means_"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.7475803 , 26.32310512],\n",
              "       [ 1.84      , 51.        ],\n",
              "       [ 1.68931267, 31.40587144],\n",
              "       [ 1.69558857, 23.91676806],\n",
              "       [ 1.775     , 39.        ],\n",
              "       [ 1.75707813, 34.16622011],\n",
              "       [ 1.65      , 43.        ]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BUF8vczRsW6D",
        "outputId": "ea83a02e-691c-4b61-f6f7-0cca61935062"
      },
      "source": [
        "gm = GaussianMixture(n_components=3, random_state=0).fit(data.values)\n",
        "gm.means_"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.72807829, 25.58286677],\n",
              "       [ 1.77666741, 48.33323415],\n",
              "       [ 1.73243803, 33.4444868 ]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KXbs9HZnhpyZ"
      },
      "source": [
        "## Test"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "e9h1Nlqyf3PR",
        "outputId": "1c356317-13eb-46c9-8992-de7a923e68b3"
      },
      "source": [
        "test = pd.read_csv('test.csv')\n",
        "test.head()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Estatura(metros)</th>\n",
              "      <th>Edad(años)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.82</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.80</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.60</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.60</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.82</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Estatura(metros)  Edad(años)\n",
              "0              1.82          25\n",
              "1              1.80          27\n",
              "2              1.60          31\n",
              "3              1.60          35\n",
              "4              1.82          30"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0BwDZVE5nJgy"
      },
      "source": [
        "### Predecir Cluster con Kmeans"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "7fFIDc_rhgw2",
        "outputId": "ef3b71e2-a584-484a-c5d2-25cdc6be6dee"
      },
      "source": [
        "y=test.get(\"Estatura(metros)\").values\n",
        "x=test.get(\"Edad(años)\").values\n",
        "plt.scatter(x, y)\n",
        "x = X\n",
        "y =Y\n",
        "plt.scatter(X, Y)\n",
        "plt.show()"
      ],
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r8vKDhfknNTi"
      },
      "source": [
        "### Predecir probabilidad de pertener a un cluster con GMM para 5 clusters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L_cu2HVbh2oV"
      },
      "source": [
        "df = pd.DataFrame(gm.predict_proba(test.values))"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "Sm7aavI3ne2M",
        "outputId": "39e6f4ac-34ef-4f06-f86e-7948c1f8c109"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.999015</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.664715e-13</td>\n",
              "      <td>9.849021e-04</td>\n",
              "      <td>1.660866e-20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.999956</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.526634e-07</td>\n",
              "      <td>4.390786e-05</td>\n",
              "      <td>6.292414e-16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.182883</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8.168948e-01</td>\n",
              "      <td>2.226294e-04</td>\n",
              "      <td>8.760541e-19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.000001</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.999984e-01</td>\n",
              "      <td>2.477536e-10</td>\n",
              "      <td>3.063095e-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.011174</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.888206e-01</td>\n",
              "      <td>1.374130e-09</td>\n",
              "      <td>5.540619e-06</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          0    1             2             3             4\n",
              "0  0.999015  0.0  4.664715e-13  9.849021e-04  1.660866e-20\n",
              "1  0.999956  0.0  2.526634e-07  4.390786e-05  6.292414e-16\n",
              "2  0.182883  0.0  8.168948e-01  2.226294e-04  8.760541e-19\n",
              "3  0.000001  0.0  9.999984e-01  2.477536e-10  3.063095e-07\n",
              "4  0.011174  0.0  9.888206e-01  1.374130e-09  5.540619e-06"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L4roxStfo3XE"
      },
      "source": [
        "## Estimacion de  Monte Carlo"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f3xnRdDcpFbj",
        "outputId": "5e92e0d7-0aeb-4b25-b8f7-cde24301fa54"
      },
      "source": [
        "e = gm.sample(100)\n",
        "e"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[ 1.63417602, 28.48761635],\n",
              "        [ 1.63141659, 30.58245123],\n",
              "        [ 1.73978135, 27.21132579],\n",
              "        [ 1.82502184, 26.12407294],\n",
              "        [ 1.78013856, 25.80636848],\n",
              "        [ 1.82332844, 24.84783911],\n",
              "        [ 1.77416893, 26.47422784],\n",
              "        [ 1.81472011, 23.86029663],\n",
              "        [ 1.83422116, 26.02523845],\n",
              "        [ 1.76592896, 25.87363498],\n",
              "        [ 1.7246308 , 28.81324298],\n",
              "        [ 1.71271195, 27.34476472],\n",
              "        [ 1.88246533, 24.65770019],\n",
              "        [ 1.59712498, 29.34006438],\n",
              "        [ 1.70714941, 26.70405715],\n",
              "        [ 1.8447339 , 24.64388202],\n",
              "        [ 1.72772793, 25.78563088],\n",
              "        [ 1.57953957, 28.04256193],\n",
              "        [ 1.7242129 , 26.82453331],\n",
              "        [ 1.74132956, 26.18971937],\n",
              "        [ 1.66261788, 27.14983406],\n",
              "        [ 1.67290646, 26.04538635],\n",
              "        [ 1.75918825, 25.37109595],\n",
              "        [ 1.68247029, 26.92578765],\n",
              "        [ 1.74333026, 25.9148188 ],\n",
              "        [ 1.64610183, 28.24829766],\n",
              "        [ 1.71290147, 27.11375906],\n",
              "        [ 1.67884991, 28.83312677],\n",
              "        [ 1.73123565, 25.82103138],\n",
              "        [ 1.72740689, 25.83841501],\n",
              "        [ 1.77900917, 25.31406773],\n",
              "        [ 1.79228464, 27.43531972],\n",
              "        [ 1.6435524 , 26.69434968],\n",
              "        [ 1.68805411, 26.67917716],\n",
              "        [ 1.78001689, 26.08160551],\n",
              "        [ 1.81559837, 25.04804388],\n",
              "        [ 1.85769955, 24.79982407],\n",
              "        [ 1.65649377, 26.97425902],\n",
              "        [ 1.63612177, 27.92940341],\n",
              "        [ 1.6994285 , 29.43618347],\n",
              "        [ 1.85479877, 24.05508961],\n",
              "        [ 1.77705333, 26.30401223],\n",
              "        [ 1.75274736, 27.19191889],\n",
              "        [ 1.6534032 , 27.90104825],\n",
              "        [ 1.6682043 , 27.95083533],\n",
              "        [ 1.68922463, 28.01069736],\n",
              "        [ 1.82994346, 53.19928892],\n",
              "        [ 1.83393787, 52.21277816],\n",
              "        [ 1.85177397, 49.01968883],\n",
              "        [ 1.84246408, 50.51785303],\n",
              "        [ 1.70052796, 34.44486803],\n",
              "        [ 1.68365009, 34.15063979],\n",
              "        [ 1.68120341, 31.23979634],\n",
              "        [ 1.66348402, 33.79537908],\n",
              "        [ 1.86960627, 35.19390114],\n",
              "        [ 1.83441312, 34.83942963],\n",
              "        [ 1.75096712, 34.27193658],\n",
              "        [ 1.59835586, 31.40358919],\n",
              "        [ 1.7361946 , 33.00828132],\n",
              "        [ 1.72224591, 31.97792418],\n",
              "        [ 1.75622327, 33.21003374],\n",
              "        [ 1.7284562 , 32.80175581],\n",
              "        [ 1.70985325, 31.44464576],\n",
              "        [ 1.75958953, 33.42075817],\n",
              "        [ 1.73197736, 29.91056364],\n",
              "        [ 1.71369445, 33.16612445],\n",
              "        [ 1.7688393 , 35.52572593],\n",
              "        [ 1.73338825, 34.92188753],\n",
              "        [ 1.66774529, 32.99908958],\n",
              "        [ 1.64794099, 31.86470694],\n",
              "        [ 1.7543572 , 33.1725171 ],\n",
              "        [ 1.85949785, 34.69537343],\n",
              "        [ 1.86259618, 33.95825148],\n",
              "        [ 1.81018933, 35.25605799],\n",
              "        [ 1.61922783, 31.53540229],\n",
              "        [ 1.68179597, 31.98514192],\n",
              "        [ 1.67225931, 30.49880638],\n",
              "        [ 1.63563648, 30.1101819 ],\n",
              "        [ 1.7684858 , 31.45459018],\n",
              "        [ 1.66879492, 24.18525682],\n",
              "        [ 1.53063433, 26.90524869],\n",
              "        [ 1.62383955, 24.95174692],\n",
              "        [ 1.77226026, 22.54913261],\n",
              "        [ 1.57078063, 26.10969303],\n",
              "        [ 1.72457733, 24.57208596],\n",
              "        [ 1.73698442, 23.21049797],\n",
              "        [ 1.73879711, 22.93184808],\n",
              "        [ 1.70254592, 24.03925275],\n",
              "        [ 1.76691189, 22.31758021],\n",
              "        [ 1.63070247, 24.01399346],\n",
              "        [ 1.7224531 , 20.6561836 ],\n",
              "        [ 1.80447831, 36.56304835],\n",
              "        [ 1.69556508, 42.51060443],\n",
              "        [ 1.68846699, 40.39075563],\n",
              "        [ 1.68644055, 41.14510409],\n",
              "        [ 1.59057958, 42.96212702],\n",
              "        [ 1.73720025, 39.58947357],\n",
              "        [ 1.83027176, 35.5973987 ],\n",
              "        [ 1.72591811, 41.12294519],\n",
              "        [ 1.69432808, 40.51164425]]),\n",
              " array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "        0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
              "        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
              "        3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4]))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oEUMUs9jp0sR"
      },
      "source": [
        "estutura_ = e[0][:,0]\n",
        "edad_ = e[0][:,1]\n",
        "f = estutura_ / edad_ "
      ],
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xTLcEYlfq4P2"
      },
      "source": [
        "### Estimacion de f(x)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "uJYr50VPqZsv",
        "outputId": "27176135-2be4-4e82-9569-0068a2015cc2"
      },
      "source": [
        "fx = np.linspace(-5,5,100)\n",
        "plt.plot(fx,f, 'r')\n",
        "plt.show()"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8aDzxZmQriuf"
      },
      "source": [
        "### Estimacion promedio de estatura y edad"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AlurlT_eqr-m",
        "outputId": "e41ebcb6-2da9-4a9d-ee19-24d7c6773916"
      },
      "source": [
        "print(np.mean(estutura_), np.mean(edad_))"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1.7274828019177508 30.367492065466585\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6cxCkvsCscm7"
      },
      "source": [
        "## Conclusiones"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QFNKvh4Msfhr"
      },
      "source": [
        "Despues de probar varios valores para ´K´ en los distintos modelos(Kmeans, y GMM) se concluye:\n",
        "- El valor de k depende mucho del conocimiento del negocio ya que mientras hacia los experimentos visualmente veia n clusters pero cuando cambiaba el valor de k podia ver nuevos clusters."
      ]
    }
  ]
}